var A = 42;

var buf[30] = 0;

// Fibo function using memoisation with a given buffer
def fibo_mem(buffer, size) {
  let y = 2;
  buffer[0] = 0;
  buffer[1] = 1;

  while y != size {
    buffer[y] = buffer[y-1] + buffer[y-2];
    y = y + 1;
  }
}

// Integer mltiplication
def mult(x, y) {
  let acc = 0;

  while x && y {
    if y & 1 {
      acc = acc + x;
    } else {
      nop;
    }

    x = x << 1;
    y = y >> 1;
  }

  return acc;
}

// Recursive factorial function
def factorial(x) {
  if x == 0 {
    return 1;
  } else {
    return mult(x, factorial(x-1));
  }
}

// Loop based factorial function
def loop_factorial(x) {
  let acc = 1;
  let i = 1;

  while i <= x {
    acc = mult(acc, i);
    i = i + 1;
  }

  return acc;
}

// Factorial intermediate function using tail calls
def tail_factorial_aux(acc, x) {
  if x == 0 {
    return acc;
  } else {
    return tail_factorial_aux(mult(x, acc), x-1);
  }
}

// Factorial using tail calls
def tail_factorial(x) {
  return tail_factorial_aux(1, x);
}

// Fibonachi function using recursive calls
def fibo(x) {
  if (x == 0) | (x == 1) {
    return x;
  } else {
    return fibo(x-1) + fibo(x-2);
  }
}

var hello_world = "hello world\n";

def main() {
  fibo_mem(buf, 100);

  print_i32(buf[20]);

  print_i32(fibo(20));

  print_i32(factorial(12));
  print_i32(tail_factorial(12));
  print_i32(loop_factorial(12));

  puts(hello_world);
}
